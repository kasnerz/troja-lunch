import os
import requests
import json
import socket
import logging
import datetime
import random
from datetime import timedelta
from flask import Flask, render_template, jsonify, request, url_for
from collections import defaultdict
from slack_sdk import WebClient

from .places import Menu, Dish
from .places import MenzaTroja, BufetTroja, CastleRestaurant

from flask_apscheduler import APScheduler

scheduler = APScheduler()
app = Flask(__name__)

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO, datefmt='%H:%M:%S')
logger = logging.getLogger(__name__)

SLACK_SIGNING_SECRET = os.environ['SLACK_SIGNING_SECRET']
slack_token = os.environ['SLACK_BOT_TOKEN']
# VERIFICATION_TOKEN = os.environ['VERIFICATION_TOKEN']

#instantiating slack client
slack_client = WebClient(slack_token)


def fetch_all():
    all_menus = []

    for place_cls in app.config['places']:
        place = place_cls()
        try:
            logger.info(f"Fetching data for {place.name}")
            menu = place.get_menu()
            all_menus.append(menu)
        except Exception as e:
            logger.error(f"Error when fetching data for {place.name}")
            logger.exception(e)
    
    return all_menus


def process_overview(menus, date):
    overview = []    

    for place in menus:
        for menu in place:  
            if menu.date == date:
                menu.translate()   
                overview.append({
                    "name" : menu.place,
                    "soups" : [s.__dict__ for s in menu.soups],
                    "dishes" : [d.__dict__ for d in menu.dishes]
                })

    overview.sort(key=lambda x: x["name"])
    return overview

def get_overview():
    return get_overview_from_cache()


def get_overview_from_cache():
    return app.config['overview']

@app.before_first_request
def reload_overview():
    now = datetime.datetime.now() 

    menus = fetch_all()
    overview = process_overview(menus, now.date())
    save_overview_to_cache(overview)


def save_overview_to_cache(overview):
    app.config['overview'] = overview
    app.config['last_update'] = datetime.datetime.now()



def generate_meal_of_the_day():
    overview = get_overview()
    place = random.choice(overview)
    place_name = place["name"]

    dish = random.choice(place["dishes"])
    dish_name = dish["name_en"] or dish["name"]

    app.config["meal_of_the_day"] = (place_name, dish_name)
    


@app.route('/motd', methods=['GET'])
def meal_of_the_day():
    if app.config["meal_of_the_day"]:
        return (app.config["meal_of_the_day"][1], 200)
    else:
        return ("", 404)
    

@app.route('/', methods=['GET', 'POST'])
def index():
    logger.info(f"Page loaded")
    
    now = datetime.datetime.now() 
    overview = get_overview()
    last_update = app.config['last_update'].strftime("%A %d %b %Y %H:%M:%S")
    
    return render_template('index.html', 
        date=now.strftime("%A %d %B %Y"), 
        overview=overview,
        last_update=last_update
    )

@app.route('/test_motd', methods=['GET', 'POST'])
def test_motd():
    generate_meal_of_the_day()


@app.route('/test_invite', methods=['GET', 'POST'])
def test_invite():
    send_lunch_invite()


def send_lunch_invite():
    place_name, dish_name = app.config["meal_of_the_day"]
    
    now = datetime.datetime.now()
    now_str = now.strftime("%Y-%m-%d")

    message = [
        {
            "type": "section",
            "text": {
              "type": "mrkdwn",
              "text": f"Today on the menu:\nüßë‚Äçüç≥ *{dish_name}* at *{place_name}*\n\nWho's going for lunch? üòä"
            },
            "accessory": {
                "type": "image",
                "image_url": f"http://ufallab.ms.mff.cuni.cz/~kasner/cfm/{now_str}.png",
                "alt_text": "meal of the day"
            }
        },
        {
            "type": "divider"
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "_The image was generated by Stable Diffusion. The dish name was translated by CUBBITT._"
            }
        }
    ]
    post_message(message)



def post_message(m):
    try:
        response = slack_client.chat_postMessage(
            channel="UV2PNNLE6",
            blocks=m
        )
    except SlackApiError as e:
        logger.error(e.response["error"])
        logger.exception(e)



def create_app(*args, **kwargs):
    app.config['places'] = [
        MenzaTroja,
        BufetTroja,
        CastleRestaurant
    ]
    app.config['overview'] = None
    app.config['last_update'] = None

    scheduler.add_job(id='fetch', func=reload_overview, trigger="cron", hour=7, replace_existing=True)
    scheduler.add_job(id='motd', func=generate_meal_of_the_day, trigger="cron", hour=8, replace_existing=True)
    scheduler.add_job(id='invite', func=send_lunch_invite, trigger="cron", hour=12, replace_existing=True)
    scheduler.start()
    
    random.seed(42)
    # reload_overview()

    return app


if __name__ == "__main__":
    app = create_app()
    app.run(debug=True)